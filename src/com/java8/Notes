Why Java 8?
Missing functional programming benefits in OOPS nature and to utilise them.
Enable parallel programming.
More compatible code for multi-core processors.

Features of Java 8?
1. Lambda Expressions (x,y) -> x+y
2. Stream API
3. Date and Time API
4. Base64 Encode Decode
5. Method reference and constructor reference (:: operator)
6. Default methods in interfaces
7. Static methods in interfaces
8. Functional Interface
9. Optional Class

------------------------------------------------------------------------------------------------------------------------

LAMBDA EXPRESSION

What is Lambda Expression?
1. Anonymous function
2. Not having any name, return type, modifier

Steps to make any function Lambda Expression
1. Remove modifier
2. Remove return type
3. Remove method name
4. Place arrow

Benefits of Lambda Expression
1. Enable Functional Programming
2. More concise, readable, maintainable code
3. Enable parallel processing
4. JAR file size reduction
5. Elimination of shadow variables

------------------------------------------------------------------------------------------------------------------------

FUNCTIONAL INTERFACE

1. Interface with exactly one abstract method (no body) but can have any number of static and default methods.
2. We can invoke lambda expression by using functional interface.

Advantage of @FunctionalInterface
1. It restricts the interface to be a functional interface.
2. So if people have already used some lambda expression and some new team member added another abstract method in the
interface all lambda expressions will have errors.

Functional Interface Inheritance
1. If a child inherits the parent functional interface, then it will also be a functional interface provided it does not
define another abstract method because that would violate the said rule of functional interfaces having only one abstract method.
But it can have the same abstract method as the parent interface.

------------------------------------------------------------------------------------------------------------------------

DEFAULT METHODS INSIDE INTERFACE

1. Methods with body are called default methods.
2. Until 1.7 only public abstract methods were allowed whether we declare by writing or not.
3. Similarly public static final variable were allowed.
4. We can directly use the implementation if default methods without overriding them.

------------------------------------------------------------------------------------------------------------------------

STATIC METHODS INSIDE INTERFACE (From and after Java 1.8)

1. Defined in the interface with keyword static.
2. Contain complete definition of the function.
3. Cannot be overridden or changed in the implementation class.
4. Methods inside interface are by default public.
5. In order to call static methods inside interface, there's only one way by using interface name.
6. Implementation class (the class which implements an interface) CANNOT access static method defined in the interface.
   It is invisible to the implementation class.
7. Main method can also be written inside an interface.

------------------------------------------------------------------------------------------------------------------------